const list = [{"question":"What is a closure in JavaScript?","answers":[{"text":"A function that has access to variables in its outer lexical scope","correct":true},{"text":"A function that returns another function"},{"text":"A function that can be called without an object"},{"text":"A function that is defined inside an object"}]},{"question":"What is the difference between let and var?","answers":[{"text":"let is block-scoped, var is function-scoped","correct":true},{"text":"let is function-scoped, var is block-scoped"},{"text":"let is used to declare constants, var is used to declare variables"},{"text":"let is used in asynchronous programming, var is used in synchronous programming"}]},{"question":"What is the purpose of the this keyword in JavaScript?","answers":[{"text":"To refer to the object that is executing the current function or method","correct":true},{"text":"To create a new object with a prototype"},{"text":"To access the global object"},{"text":"To refer to the parent object in a nested object"}]},{"question":"What is the difference between == and ===?","answers":[{"text":"== performs type coercion, === does not","correct":true},{"text":"== only compares values, === compares both values and types"},{"text":"== is faster than ==="},{"text":"== is used for strict equality, === is used for loose equality"}]},{"question":"What is a callback function?","answers":[{"text":"A function that is passed as an argument to another function and is executed when a certain event occurs","correct":true},{"text":"A function that returns another function"},{"text":"A function that is called with the new keyword"},{"text":"A function that is used to convert a string to a number"}]},{"question":"What is the difference between let and const?","answers":[{"text":"let can be reassigned, const cannot","correct":true},{"text":"const is block-scoped, let is function-scoped"},{"text":"let is used for asynchronous programming, const is used for synchronous programming"},{"text":"const is used to declare constants, let is used to declare variables"}]},{"question":"What is an immediately-invoked function expression (IIFE)?","answers":[{"text":"A function that is invoked immediately after it is defined","correct":true},{"text":"A function that is called with the new keyword"},{"text":"A function that is used to convert a string to a number"},{"text":"A function that is passed as an argument to another function"}]},{"question":"What is a promise in JavaScript?","answers":[{"text":"An object that represents the eventual completion or failure of an asynchronous operation and its resulting value","correct":true},{"text":"A function that is used to generate random numbers"},{"text":"A function that is used to sort arrays"},{"text":"A function that is used to convert a string to an array"}]},{"question":"What is the difference between synchronous and asynchronous programming?","answers":[{"text":"Synchronous programming executes code in a sequential order, while asynchronous programming allows multiple operations to be performed concurrently","correct":true},{"text":"Synchronous programming is faster than asynchronous programming"},{"text":"Asynchronous programming is used for desktop applications, while synchronous programming is used for web applications"},{"text":"Asynchronous programming uses callbacks, while synchronous programming does not"}]},{"question":"What is the difference between null and undefined?","answers":[{"text":"null represents the intentional absence of any object value, while undefined represents a variable that has been declared but has not been assigned a value","correct":true},{"text":"null represents a variable that has been declared but has not been assigned a value, while undefined represents the intentional absence of any object value"},{"text":"null is a number, while undefined is not a number"},{"text":"null is a boolean, while undefined is not a boolean"}]},{"question":"What is the difference between synchronous and asynchronous functions in JavaScript?","answers":[{"text":"Synchronous functions block the execution until they complete, while asynchronous functions allow other code to run while they execute","correct":true},{"text":"Synchronous functions can only be used in web applications, while asynchronous functions can be used in any type of application"},{"text":"Asynchronous functions return a value immediately, while synchronous functions do not return a value until they complete"},{"text":"Synchronous functions can only be called once, while asynchronous functions can be called multiple times"}]},{"question":"What is the difference between the == and === operators in JavaScript?","answers":[{"text":"== compares the value of two variables, while === compares the value and the data type of two variables","correct":true},{"text":"== compares the value and the data type of two variables, while === only compares the value of two variables"},{"text":"== and === are interchangeable and can be used interchangeably"},{"text":"== and === are both used to assign values to variables"}]},{"question":"Closure in JavaScript are?","answers":[{"text":"a function that has access to its parent function's variables, even after the parent function has returned","correct":true},{"text":"a function that can be called recursively"},{"text":"a function that can only be called once"},{"text":"a function that is used to create new objects"}]},{"question":"What is the purpose of the bind() method in JavaScript?","answers":[{"text":"The bind() method creates a new function that, when called, has its this keyword set to the provided value","correct":true},{"text":"The bind() method is used to concatenate two strings"},{"text":"The bind() method is used to sort an array"},{"text":"The bind() method is used to convert a string to an array"}]},{"question":"What is the difference between var, let, and const in JavaScript?","answers":[{"text":"var is function-scoped, let and const are block-scoped; var can be reassigned, let can be reassigned but const cannot; const is used to declare constants","correct":true},{"text":"var is block-scoped, let and const are function-scoped; var cannot be reassigned, let and const can be reassigned; let is used to declare constants"},{"text":"var and let are function-scoped, const is block-scoped; var and const can be reassigned, let cannot be reassigned; var is used to declare constants"},{"text":"var, let, and const are all interchangeable and can be used interchangeably"}]},{"question":"What is hoisting in JavaScript?","answers":[{"text":"Hoisting is a mechanism where variable and function declarations are moved to the top of their respective scopes.","correct":true},{"text":"Hoisting is a mechanism where variable and function declarations are moved to the bottom of their respective scopes."},{"text":"Hoisting is a mechanism where variable and function declarations are ignored by the interpreter."},{"text":"Hoisting is a mechanism where variable and function declarations are deleted by the interpreter."}]},{"question":"What is the difference between call() and apply() methods in JavaScript?","answers":[{"text":"The call() method passes arguments as a comma-separated list, while the apply() method passes arguments as an array.","correct":true},{"text":"The call() method passes arguments as an array, while the apply() method passes arguments as a comma-separated list."},{"text":"The call() method is used to invoke a method on a specific object, while the apply() method is used to invoke a method on the current object."},{"text":"The call() and apply() methods are interchangeable and have the same behavior."}]},{"question":"What is the prototype chain in JavaScript?","answers":[{"text":"The prototype chain is a series of linked objects that allows an object to inherit properties and methods from its parent objects.","correct":true},{"text":"The prototype chain is a series of linked objects that allows an object to share properties and methods with its sibling objects."},{"text":"The prototype chain is a series of linked objects that allows an object to override properties and methods from its parent objects."},{"text":"The prototype chain is a series of linked objects that allows an object to encapsulate properties and methods from its parent objects."}]},{"question":"What is memoization in JavaScript?","answers":[{"text":"The process of converting data from one format to another"},{"text":"The process of caching the results of a function call to improve performance","correct":true},{"text":"The process of binding a function to an object"},{"text":"The process of chaining multiple functions together"}]},{"question":"What is functional programming?","answers":[{"text":"A programming paradigm that emphasizes mutable state and imperative code"},{"text":"A programming paradigm that emphasizes pure functions and immutable data","correct":true},{"text":"A programming paradigm that emphasizes object-oriented design patterns"},{"text":"A programming paradigm that emphasizes code readability and simplicity"}]},{"question":"What is the event loop in JavaScript?","answers":[{"text":"A loop that waits for user input to execute code"},{"text":"A loop that manages the order in which code is executed in a single-threaded environment","correct":true},{"text":"A loop that continuously runs in the background, even when the browser window is closed"},{"text":"An infinite loop that crashes the browser"}]},{"question":"What is the output of the following code?","code":"console.log(typeof typeof 1);","answers":[{"text":"'number'"},{"text":"'string'","correct":true},{"text":"'object'"},{"text":"'undefined'"}]},{"question":"What is the output of the following code?","code":"for (var i = 0; i < 5; i++) {\n setTimeout(function() {\n console.log(i);\n }, i * 1000);\n}","answers":[{"text":"0, 1, 2, 3, 4"},{"text":"5, 5, 5, 5, 5","correct":true},{"text":"1, 2, 3, 4, 5"},{"text":"undefined, undefined, undefined, undefined, undefined"}]},{"question":"What is the output of the following code?","code":"var a = [1, 2, 3];\nvar b = [1, 2, 3];\nconsole.log(a == b);","answers":[{"text":"true"},{"text":"false","correct":true},{"text":"undefined"},{"text":"null"}]},{"question":"What is the output of the following code?","code":"console.log(1 + '2' + '2');\nconsole.log(+'1' + '1' + 2);\nconsole.log('A' - 'B' + '2');\nconsole.log('A' - 'B' + 2);","answers":[{"text":"'122', '1122', 'NaN', NaN"},{"text":"'122', 12, 'NaN', NaN"},{"text":"'122', '12NaN', '2', NaN","correct":true},{"text":"NaN, NaN, NaN, NaN"}]},{"question":"What is the output of the following code?","code":"var a = 5;\nconsole.log(a++ + ++a);","answers":[{"text":"10"},{"text":"11","correct":true},{"text":"12"},{"text":"NaN"}]},{"question":"What is the output of the following code?","code":"function test() {\n console.log(a);\n console.log(foo());\n\n var a = 1;\n function foo() {\n return 2;\n }\n}\ntest();","answers":[{"text":"1, 2"},{"text":"undefined, 2","correct":true},{"text":"1, undefined"},{"text":"undefined, undefined"}]},{"question":"What is the output of the following code?","code":"var a = [1, 2, 3];\nconsole.log(a[10]);","answers":[{"text":"undefined","correct":true},{"text":"10"},{"text":"ReferenceError"},{"text":"TypeError"}]},{"question":"What is the output of the following code?","code":"function foo(a, b) {\n  console.log(a + b);\n}\nfoo(1, 2, 3);","answers":[{"text":"3","correct":true},{"text":"6"},{"text":"TypeError"},{"text":"ReferenceError"}]},{"question":"What is the output of the following code?","code":"var x = 1;\nif (function f() {}) {\n  x += typeof f;\n}\nconsole.log(x);","answers":[{"text":"1undefined","correct":true},{"text":"1function"},{"text":"ReferenceError"},{"text":"TypeError"}]},{"question":"What is the output of the following code?","code":"var a = {b: 1};\nconsole.log(a++);","answers":[{"text":"NaN","correct":true},{"text":"ReferenceError"},{"text":"undefined"},{"text":"TypeError"}]},{"question":"What is the output of the following loop?","code":"var arr = [1, 2, 3];\nfor (var i = 0; i < arr.length; i++) {\n  arr.splice(i, 1);\n}\nconsole.log(arr);","answers":[{"text":"[1, 2, 3]"},{"text":"[1, 3]"},{"text":"[2]","correct":true},{"text":"An error is thrown"}]},{"question":"What is the output of the following loop?","code":"for (var i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, 1000);\n}","answers":[{"text":"0 1 2 3 4"},{"text":"5 5 5 5 5","correct":true},{"text":"1 2 3 4 5"},{"text":"undefined undefined undefined undefined undefined"}]},{"question":"What is the output of the following loop?","code":"for (var i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n}","answers":[{"text":"0 1 2 3 4"},{"text":"1 2 3 4 5"},{"text":"5 5 5 5 5"},{"text":"0 1 2 3 4","correct":true}]},{"question":"What is the output of the following loop?","code":"var arr = [1, 2, 3];\nfor (var i in arr) {\n  arr.push(i);\n}\nconsole.log(arr);","answers":[{"text":"[1, 2, 3, '0', '1', '2']","correct":true},{"text":"[1, 2, 3, 0, 1, 2]"},{"text":"[1, 2, 3, 'i', 'i', 'i']"},{"text":"An error is thrown"}]},{"question":"What will be the output of the following code?","code":"const promise = new Promise((resolve, reject) => {\n  reject('rejected');\n});\n\npromise\n  .then(res => console.log(res))\n  .catch(err => console.log(err));","answers":[{"text":"rejected","correct":true},{"text":"undefined"},{"text":"Uncaught (in promise) rejected"},{"text":"Uncaught (in promise) undefined"}]},{"question":"What will be the output of the following code?","code":"const promise1 = new Promise(resolve => resolve(1));\nconst promise2 = new Promise(resolve => resolve(2));\n\nPromise.race([promise1, promise2])\n  .then(res => console.log(res));","answers":[{"text":"1"},{"text":"2"},{"text":"Promise {<fulfilled>: 1}"},{"text":"Promise {<fulfilled>: 2}","correct":true}]},{"question":"What will be the output of the following code?","code":"const promise1 = new Promise(resolve => resolve('one'));\nconst promise2 = new Promise(resolve => resolve('two'));\n\nPromise.all([promise1, promise2])\n  .then(res => console.log(res));","answers":[{"text":"['one', 'two']","correct":true},{"text":"Promise {<fulfilled>: ['one', 'two']}"},{"text":"Promise {<rejected>: undefined}"},{"text":"undefined"}]},{"question":"What will be the output of the following code?","code":"const promise = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('resolved'), 0);\n  reject('rejected');\n});\n\npromise\n  .then(res => console.log(res))\n  .catch(err => console.log(err));","answers":[{"text":"resolved","correct":true},{"text":"rejected"},{"text":"Uncaught (in promise) rejected"},{"text":"Uncaught (in promise) resolved"}]},{"question":"What will be the output of the following code?","code":"const promise1 = new Promise(resolve => resolve('one'));\nconst promise2 = new Promise((resolve, reject) => setTimeout(() => reject('two'), 0));\n\nPromise.all([promise1, promise2])\n  .then(res => console.log(res))\n  .catch(err => console.log(err));","answers":[{"text":"Uncaught (in promise) two","correct":true},{"text":"Promise {<rejected>: 'two'}"},{"text":"Promise {<fulfilled>: ['one']}"},{"text":"['one', 'two']"}]},{"question":"What is the output of the following code?","code":"function foo(x, callback) { setTimeout(function() { callback(x); }, 1000); }\n\nfoo(1, function(result) { console.log(result); });\nfoo(2, function(result) { console.log(result); });","answers":[{"text":"1, 2"},{"text":"2, 1"},{"text":"1, 2 (after 1 second)","correct":true},{"text":"2, 1 (after 1 second)"}]},{"question":"What is the output of the following code?","code":"function foo(callback) { setTimeout(function() { callback(); }, 1000); }\n\nfoo(function() { console.log('foo'); });\nsetTimeout(function() { console.log('bar'); }, 500);","answers":[{"text":"foo, bar"},{"text":"bar, foo"},{"text":"foo (after 1 second), bar (after 1.5 seconds)","correct":true},{"text":"bar (after 0.5 seconds), foo (after 1 second)"}]},{"question":"What is the output of the following code?","code":"function foo(callback) { callback(); }\n\nfoo(function() { console.log('foo'); });\nsetTimeout(function() { console.log('bar'); }, 0);","answers":[{"text":"foo, bar","correct":true},{"text":"bar, foo"},{"text":"foo (immediately), bar (after 0 seconds)"},{"text":"bar (immediately), foo (after 0 seconds)"}]},{"question":"What is the output of the following code?","code":"function foo(x, callback) { setTimeout(function() { callback(x * 2); }, 1000); }\n\nvar result = 0;\nfoo(2, function(x) { result = x; });\nconsole.log(result);","answers":[{"text":"0","correct":true},{"text":"2"},{"text":"4"},{"text":"undefined"}]},{"question":"What is the output of the following code?","code":"function foo(callback) { callback(); }\n\nfoo(function() { console.log('foo'); });\nfoo(function() { console.log('bar'); });","answers":[{"text":"foo, bar"},{"text":"bar, foo"},{"text":"foo, bar (in any order)","correct":true},{"text":"bar, foo (in any order)"}]},{"question":"What is the output of the following code?","code":"console.log(1 == true);","answers":[{"text":"true","correct":true},{"text":"false"}]},{"question":"What is the output of the following code?","code":"console.log(null == undefined);","answers":[{"text":"true","correct":true},{"text":"false"}]},{"question":"What is the output of the following code?","code":"console.log('1' == 1);","answers":[{"text":"true","correct":true},{"text":"false"}]},{"question":"What is the output of the following code?","code":"console.log([] == '');","answers":[{"text":"true","correct":true},{"text":"false"}]},{"question":"What is the output of the following code?","code":"console.log([] == ![]);","answers":[{"text":"true"},{"text":"false","correct":true}]}];